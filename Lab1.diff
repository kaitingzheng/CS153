Date: Oct 15 2022

diff --git a/Makefile b/Makefile
index e8cd945..413fc25 100644
--- a/Makefile
+++ b/Makefile
@@ -182,6 +182,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hello\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index 82fb982..c3b63cb 100644
--- a/defs.h
+++ b/defs.h
@@ -120,6 +120,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            exit2(int status);
+int             wait2(int*);
+int             waitpid(int, int*, int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/hello.c b/hello.c
index 876becc..1ae5bc3 100644
--- a/hello.c
+++ b/hello.c
@@ -3,5 +3,5 @@
 
 int main (int argc, char **argv) {
     printf(1, "Hello CS153\n");
-    exit();
+    exit2(100);
 }
\ No newline at end of file
diff --git a/mycode.diff b/mycode.diff
new file mode 100644
index 0000000..e69de29
diff --git a/proc.c b/proc.c
index 806b1b1..0cf744e 100644
--- a/proc.c
+++ b/proc.c
@@ -267,6 +267,55 @@ exit(void)
   panic("zombie exit");
 }
 
+// Exit the current process with status.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait() to find out it exited.
+void
+exit2(int status)
+{
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  //cprintf("\n --Status is: %d\n", status );
+  curproc->exit_status = status;
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd]){
+      fileclose(curproc->ofile[fd]);
+      curproc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+  sched();
+  panic("zombie exit");
+}
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
@@ -311,6 +360,92 @@ wait(void)
   }
 }
 
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait2(int *status)
+{
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc) continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        *status = p->exit_status;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
+int
+waitpid(int in_pid, int *status, int option) {
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->pid != in_pid) continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        *status = p->exit_status;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
diff --git a/proc.h b/proc.h
index 1647114..1d63868 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int exit_status;             // Exit status;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..54e0cdf 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_exit2(void);
+extern int sys_wait2(void);
+extern int sys_waitpid(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_exit2]   sys_exit2,
+[SYS_wait2]   sys_wait2,
+[SYS_waitpid] sys_waitpid,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..ca2ed4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_exit2  22
+#define SYS_wait2  23
+#define SYS_waitpid 24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..4695aed 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -21,12 +21,41 @@ sys_exit(void)
 }
 
 int
+sys_exit2(void){
+  int status;
+  
+  if(argint(0, &status) < 0) return -1;
+  exit2(status);
+
+  return 0;
+}
+
+int
 sys_wait(void)
 {
   return wait();
 }
 
 int
+sys_wait2(void)
+{
+  int *status;
+  if(argptr(0, (char**)&status, sizeof(status)) < 0) return -1;
+  return wait2(status);
+}
+
+int
+sys_waitpid(void)
+{
+  int *status;
+  if(argptr(1, (char**)&status, sizeof(status)) < 0) return -1;
+  int in_pid, option;
+  if(argint(0, &in_pid) < 0) return -1;
+  if(argint(0, &option) < 0) return -1;
+  return waitpid(in_pid, status, option);
+}
+
+int
 sys_kill(void)
 {
   int pid;
diff --git a/test.c b/test.c
new file mode 100644
index 0000000..42f84ae
--- /dev/null
+++ b/test.c
@@ -0,0 +1,105 @@
+#include "types.h"
+#include "user.h"
+
+#define WNOHANG 	1
+  
+int exitWait(void) {
+	  int pid, ret_pid, exit_status;
+    int i;
+  // use this part to test exit(int status) and wait(int* status)
+ 
+  printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
+
+  for (i = 0; i < 2; i++) {
+    pid = fork();
+    if (pid == 0) { // only the child executed this code
+      if (i == 0){
+        printf(1, "\nThis is child with PID# %d and I will exit with status %d\n", getpid(), 0);
+        exit2(0);
+      }
+      else{
+	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
+        exit2(-1);
+      } 
+    } else if (pid > 0) { // only the parent executes this code
+      ret_pid = wait2(&exit_status);
+      printf(1, "\n This is the parent: child with PID# %d has exited with status %d\n", ret_pid, exit_status);
+    } else { // something went wrong with fork system call
+	    printf(2, "\nError using fork\n");
+      exit2(-1);
+    }
+  }
+  return 0;
+}
+
+int waitPid(void){
+	
+  int ret_pid, exit_status;
+  int i;
+  int pid_a[5]={0, 0, 0, 0, 0};
+ // use this part to test wait(int pid, int* status, int options)
+
+  printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
+
+	for (i = 0; i <5; i++) {
+		pid_a[i] = fork();
+		if (pid_a[i] == 0) { // only the child executed this code
+			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
+			exit2(getpid() + 4);
+		}
+	}
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
+  ret_pid = waitpid(pid_a[3], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[1]);
+  ret_pid = waitpid(pid_a[1], &exit_status, 0);
+  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[2]);
+  ret_pid = waitpid(pid_a[2], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[0]);
+  ret_pid = waitpid(pid_a[0], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[4]);
+  ret_pid = waitpid(pid_a[4], &exit_status, 0);
+  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
+
+
+  printf(1, "\n This is the parent: Now try to wait for a invalid Number, this should not get stuck..\n");
+  ret_pid = waitpid(9999, &exit_status, 0);
+  printf(1, "\n This is the parent: Child# 9999 has ret code %d, expected: -1\n",ret_pid);
+  //printf(1, "\n This is the parent: Child# %d has exited with status %d\n",ret_pid, exit_status);
+
+  printf(1, "\n This is the parent: Now try to give invalid argument.\n");
+  ret_pid = waitpid(9999, (int*) 0xffffffff, 0);
+  printf(1, "\n This is the parent: Got ret code %d, expected: -1\n",ret_pid);
+
+  return 0;
+}
+
+
+
+int main(int argc, char *argv[])
+{
+	
+	int exitWait(void);
+	int waitPid(void);
+
+  printf(1, "\n This program tests the correctness of your lab#1\n");
+  
+  if (atoi(argv[1]) == 1)
+	exitWait();
+  else if (atoi(argv[1]) == 2)
+  waitPid();
+  else 
+   printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
+  
+    // End of test
+	 exit2(0);
+	 return 0;
+ }
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..fc44218 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int exit2(int) __attribute__((noreturn));
+int wait2(int*);
+int waitpid(int pid, int *status, int options);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..499915e 100644
--- a/usys.S
+++ b/usys.S
@@ -10,7 +10,10 @@
 
 SYSCALL(fork)
 SYSCALL(exit)
+SYSCALL(exit2)
 SYSCALL(wait)
+SYSCALL(wait2)
+SYSCALL(waitpid)
 SYSCALL(pipe)
 SYSCALL(read)
 SYSCALL(write)
