diff --git a/Lab2.dff b/Lab2.dff
new file mode 100644
index 0000000..e69de29
diff --git a/defs.h b/defs.h
index c3b63cb..a67225e 100644
--- a/defs.h
+++ b/defs.h
@@ -123,6 +123,7 @@ void            yield(void);
 void            exit2(int status);
 int             wait2(int*);
 int             waitpid(int, int*, int);
+void            setpriority(int priority);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/exec.c b/exec.c
index b40134f..f88ca36 100644
--- a/exec.c
+++ b/exec.c
@@ -18,6 +18,7 @@ exec(char *path, char **argv)
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
+  curproc->T_start = ticks;
 
   begin_op();
 
diff --git a/lab2test.c b/lab2test.c
index 269333a..050adfc 100644
--- a/lab2test.c
+++ b/lab2test.c
@@ -29,7 +29,7 @@ int PScheduler(void){
 	if (pid > 0) {
             continue;
         } else if ( pid == 0) {
-            printf(1, " - Hello! this is child# %d and I will change my priority to %d \n", getpid(), 60 - 20 * i);
+            printf(1, " - Hello! this is child# %d and I will change my priority to %d \n", getpid(), 30 - 10 * i);
             setpriority(30 - 10 * i); // Use your own setpriority interface
             for (j = 0; j < 50000; j++) {
                 asm("nop");
diff --git a/proc.c b/proc.c
index 0cf744e..33221c1 100644
--- a/proc.c
+++ b/proc.c
@@ -88,6 +88,9 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->prior_val = 10;
+  //p->T_start = ticks;
+  p->T_burst = 0;
 
   release(&ptable.lock);
 
@@ -199,6 +202,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->T_start = curproc->T_start;
+  np->prior_val = curproc->prior_val;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -231,6 +236,15 @@ exit(void)
   struct proc *p;
   int fd;
 
+  //fd
+  curproc->exit_status = 0;
+  curproc->T_finish = ticks;
+  int turnaround = curproc->T_finish - curproc->T_start;
+  int waiting = turnaround - curproc->T_burst;
+
+
+  cprintf("Turnaround time: %d CPU ticks\nWaiting time: %d CPU ticks\n", turnaround, waiting);
+
   if(curproc == initproc)
     panic("init exiting");
 
@@ -278,7 +292,17 @@ exit2(int status)
   int fd;
 
   //cprintf("\n --Status is: %d\n", status );
+
+  //cprintf("\nT_start: %d \n T_finish: %d \n\n", curproc->T_start, curproc->T_finish);
+
+  
+
   curproc->exit_status = status;
+  curproc->T_finish = ticks;
+  int turnaround = curproc->T_finish - curproc->T_start;
+  int waiting = turnaround - curproc->T_burst;
+
+  cprintf("Turnaround time: %d CPU ticks\nWaiting time: %d CPU ticks\n", turnaround, waiting);
 
   if(curproc == initproc)
     panic("init exiting");
@@ -344,6 +368,7 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+
         release(&ptable.lock);
         return pid;
       }
@@ -387,6 +412,7 @@ wait2(int *status)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+        
         *status = p->exit_status;
         release(&ptable.lock);
         return pid;
@@ -428,6 +454,7 @@ waitpid(int in_pid, int *status, int option) {
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+      
         *status = p->exit_status;
         release(&ptable.lock);
         return pid;
@@ -445,6 +472,14 @@ waitpid(int in_pid, int *status, int option) {
   }
 }
 
+void 
+setpriority(int priority){
+  struct proc *curproc = myproc();
+  if (priority > 31) priority = 31;
+  if (priority < 0) priority = 0;
+  curproc->prior_val = priority;
+}
+
 
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
@@ -459,6 +494,7 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
+  struct proc *top_priority_proc;
   c->proc = 0;
   
   for(;;){
@@ -471,14 +507,33 @@ scheduler(void)
       if(p->state != RUNNABLE)
         continue;
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
+      // get highest priority
+      // keep track of highest priority proc
+      struct proc *newP;
+      top_priority_proc = p;
+      for(newP = ptable.proc; newP < &ptable.proc[NPROC]; newP++){
+        if(newP->prior_val < top_priority_proc->prior_val && newP->state == RUNNABLE){
+          top_priority_proc = newP;
+        }
+      }
+      
+      c->proc = top_priority_proc;
+      switchuvm(top_priority_proc);
+      top_priority_proc->state = RUNNING;
+      top_priority_proc->T_burst++;
+
+      swtch(&(c->scheduler), top_priority_proc->context);
+      
+      // aging
+      for(newP = ptable.proc; newP < &ptable.proc[NPROC]; newP++){
+        if(top_priority_proc == newP){
+          newP->prior_val++;
+        }
+        else {
+          newP->prior_val--;
+        }
+      }
 
-      swtch(&(c->scheduler), p->context);
       switchkvm();
 
       // Process is done running for now.
@@ -522,6 +577,7 @@ yield(void)
 {
   acquire(&ptable.lock);  //DOC: yieldlock
   myproc()->state = RUNNABLE;
+  
   sched();
   release(&ptable.lock);
 }
diff --git a/proc.h b/proc.h
index 1d63868..98a541e 100644
--- a/proc.h
+++ b/proc.h
@@ -50,6 +50,10 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
   int exit_status;             // Exit status;
+  int prior_val;               // priority value;
+  uint T_start;
+  uint T_finish;
+  uint T_burst;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 54e0cdf..540df3c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -106,6 +106,7 @@ extern int sys_uptime(void);
 extern int sys_exit2(void);
 extern int sys_wait2(void);
 extern int sys_waitpid(void);
+extern int sys_setpriority(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -132,6 +133,7 @@ static int (*syscalls[])(void) = {
 [SYS_exit2]   sys_exit2,
 [SYS_wait2]   sys_wait2,
 [SYS_waitpid] sys_waitpid,
+[SYS_setpriority] sys_setpriority,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index ca2ed4a..4826c3a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -23,3 +23,4 @@
 #define SYS_exit2  22
 #define SYS_wait2  23
 #define SYS_waitpid 24
+#define SYS_setpriority 25
diff --git a/sysproc.c b/sysproc.c
index f4d5e90..3cba46e 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -56,6 +56,15 @@ sys_waitpid(void)
 }
 
 int
+sys_setpriority(void){
+  int priority;
+  
+  if(argint(0, &priority) < 0) return -1;
+  setpriority(priority);
+  return 0;
+}
+
+int
 sys_kill(void)
 {
   int pid;
diff --git a/user.h b/user.h
index fc44218..cc152d7 100644
--- a/user.h
+++ b/user.h
@@ -26,6 +26,7 @@ int uptime(void);
 int exit2(int) __attribute__((noreturn));
 int wait2(int*);
 int waitpid(int pid, int *status, int options);
+int setpriority(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 499915e..ddfbd72 100644
--- a/usys.S
+++ b/usys.S
@@ -32,3 +32,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(setpriority)
